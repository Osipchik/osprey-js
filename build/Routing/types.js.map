{
  "version": 3,
  "sources": ["../../packages/Routing/types.ts"],
  "sourcesContent": ["import http from 'http';\nimport ServerErrorHandler from '../Routing/ErrorHandlers/ServerErrorHandler';\nimport NotFoundHandler from '../Routing/ErrorHandlers/NotFoundHandler';\nimport MethodNotAllowedHandler from '../Routing/ErrorHandlers/MethodNotAllowedHandler';\nimport NotImplementedHandler from '../Routing/ErrorHandlers/NotImplementedHandler';\n\nexport type IncomingMessageType = http.IncomingMessage;\nexport type ServerResponseType = http.ServerResponse;\n\nexport type methodsTypes = 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS' | 'TRACE' | 'PATCH';\nexport type RequestHandlerType = (\n  request: IncomingMessageType,\n  response: ServerResponseType,\n) => void;\n\nexport type RouteValueType = {\n  handler: Function,\n  params?: object,\n}\n\nexport type HandlerMetaType = {\n  method: methodsTypes,\n  path: string,\n  prefix?: string,\n  query?: string,\n}\n\nexport type MetaHandlerType = RequestHandlerType & {\n  meta?: HandlerMetaType\n};\n\nexport type routeType = {\n  [key: string]: RequestHandlerType;\n}\n\nexport interface IErrorRouter {\n  ServerError: typeof ServerErrorHandler,\n  NotFound: typeof NotFoundHandler,\n  MethodNotAllowed: typeof MethodNotAllowedHandler,\n  NotImplemented: typeof NotImplementedHandler,\n}\n\nexport interface ICommonRouter {\n  GET: routeType,\n  HEAD: routeType,\n  POST: routeType,\n  PUT: routeType,\n  DELETE: routeType,\n  CONNECTS: routeType,\n  OPTIONS: routeType,\n  TRACE: routeType,\n  PATCH: routeType,\n}\n\nexport type IRoute = IErrorRouter & ICommonRouter;\n"],
  "mappings": "+WAAA,IAAAA,EAAA,kBAAAC,EAAAD",
  "names": ["types_exports", "__toCommonJS"]
}
