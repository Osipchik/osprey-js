{
  "version": 3,
  "sources": ["../../../packages/Routing/decorators/method.ts", "../../../packages/Routing/methods.ts", "../../../packages/utils/metaStore.ts"],
  "sourcesContent": ["import { IncomingMessageType, ServerResponseType, methodsTypes } from '../../Routing/types';\nimport { DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE } from '../../Routing/methods';\nimport { StatusCodes } from '../../Response/statusCodes';\nimport MetaStore from '../../utils/metaStore';\nimport type { ResponseHandlerType } from '../../Response/types';\n\nfunction asyncHandler(originalHandler: Function, meta: any): (\n  request: IncomingMessageType,\n  response: ServerResponseType,\n) => Promise<void> {\n  return async (\n    request: IncomingMessageType,\n    response: ServerResponseType,\n    ...args: unknown[]\n  ) => {\n    const context = {\n      request,\n      response\n    };\n\n    const handleResponse: ResponseHandlerType = await originalHandler.apply({ ...this, ...context}, args);\n    handleResponse(request, response, meta);\n  };\n}\n\nfunction decoratorFabric(\n  method: methodsTypes,\n  path?: string,\n  statusCode?: StatusCodes,\n): MethodDecorator {\n  return (\n    target: object,\n    name: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    const originalDescriptorValue: Function = descriptor.value;\n    const meta = MetaStore.getMeta(descriptor);\n\n    descriptor.value = asyncHandler(originalDescriptorValue, meta);\n\n    MetaStore.addMeta(descriptor, 'meta', {\n      path: path || '',\n      method,\n    })\n\n    return descriptor;\n  };\n}\n\nexport function Get(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(GET, path, statusCode);\n}\n\nexport function Put(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(PUT, path, statusCode);\n}\n\nexport function Post(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(POST, path, statusCode);\n}\n\nexport function Delete(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(DELETE, path, statusCode);\n}\n\nexport function Patch(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(PATCH, path, statusCode);\n}\n\nexport function Trace(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(TRACE, path, statusCode);\n}\n\nexport function Options(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(OPTIONS, path, statusCode);\n}\n\nexport function Head(path?: string, statusCode?: StatusCodes) {\n  return decoratorFabric(HEAD, path, statusCode);\n}\n", "export const GET = 'GET';\nexport const HEAD = 'HEAD';\nexport const POST = 'POST';\nexport const PUT = 'PUT';\nexport const DELETE = 'DELETE';\nexport const CONNECTS = 'CONNECTS';\nexport const OPTIONS = 'OPTIONS';\nexport const TRACE = 'TRACE';\nexport const PATCH = 'PATCH';\n", "class MetaStore {\n  private static meta = new WeakMap();\n  private static values = new WeakMap();\n\n  static addMeta(node: any, key: string, data: any) {\n    if (MetaStore.meta.has(node)) {\n      const root = MetaStore.meta.get(node);\n      root[key] = data;\n    } else {\n      MetaStore.meta.set(node, { [key]: data });\n    }\n\n    MetaStore.values.set(node.value, MetaStore.meta.get(node))\n  }\n\n  static getMeta(node: any) {\n    return MetaStore.meta.get(node) || MetaStore.values.get(node);\n  }\n}\n\nexport default MetaStore;\n"],
  "mappings": "wmBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,YAAAE,EAAA,QAAAC,EAAA,SAAAC,EAAA,YAAAC,EAAA,UAAAC,EAAA,SAAAC,EAAA,QAAAC,EAAA,UAAAC,IAAA,eAAAC,EAAAV,GCAO,IAAMW,EAAM,MACNC,EAAO,OACPC,EAAO,OACPC,EAAM,MACNC,EAAS,SAEf,IAAMC,EAAU,UACVC,EAAQ,QACRC,EAAQ,QCRrB,IAAMC,EAAN,KAAgB,CAId,OAAO,QAAQC,EAAWC,EAAaC,EAAW,CAChD,GAAIH,EAAU,KAAK,IAAIC,CAAI,EAAG,CAC5B,IAAMG,EAAOJ,EAAU,KAAK,IAAIC,CAAI,EACpCG,EAAKF,CAAG,EAAIC,OAEZH,EAAU,KAAK,IAAIC,EAAM,CAAE,CAACC,CAAG,EAAGC,CAAK,CAAC,EAG1CH,EAAU,OAAO,IAAIC,EAAK,MAAOD,EAAU,KAAK,IAAIC,CAAI,CAAC,CAC3D,CAEA,OAAO,QAAQA,EAAW,CACxB,OAAOD,EAAU,KAAK,IAAIC,CAAI,GAAKD,EAAU,OAAO,IAAIC,CAAI,CAC9D,CACF,EAlBMI,EAANL,EAAMM,EAAAD,EAAA,aACJE,EADIF,EACW,OAAO,IAAI,SAC1BE,EAFIF,EAEW,SAAS,IAAI,SAkB9B,IAAOG,EAAQH,EFdf,SAASI,EAAaC,EAA2BC,EAG9B,CACjB,MAAO,OACLC,EACAC,KACGC,IACA,CACH,IAAMC,EAAU,CACd,QAAAH,EACA,SAAAC,CACF,GAE4C,MAAMH,EAAgB,MAAM,CAAE,GAAG,KAAM,GAAGK,CAAO,EAAGD,CAAI,GACrFF,EAASC,EAAUF,CAAI,CACxC,CACF,CAjBSK,EAAAP,EAAA,gBAmBT,SAASQ,EACPC,EACAC,EACAC,EACiB,CACjB,MAAO,CACLC,EACAC,EACAC,IACG,CACH,IAAMC,EAAoCD,EAAW,MAC/CZ,EAAOc,EAAU,QAAQF,CAAU,EAEzC,OAAAA,EAAW,MAAQd,EAAae,EAAyBb,CAAI,EAE7Dc,EAAU,QAAQF,EAAY,OAAQ,CACpC,KAAMJ,GAAQ,GACd,OAAAD,CACF,CAAC,EAEMK,CACT,CACF,CAtBSP,EAAAC,EAAA,mBAwBF,SAASS,EAAIP,EAAeC,EAA0B,CAC3D,OAAOH,EAAgBU,EAAKR,EAAMC,CAAU,CAC9C,CAFgBJ,EAAAU,EAAA,OAIT,SAASE,EAAIT,EAAeC,EAA0B,CAC3D,OAAOH,EAAgBY,EAAKV,EAAMC,CAAU,CAC9C,CAFgBJ,EAAAY,EAAA,OAIT,SAASE,EAAKX,EAAeC,EAA0B,CAC5D,OAAOH,EAAgBc,EAAMZ,EAAMC,CAAU,CAC/C,CAFgBJ,EAAAc,EAAA,QAIT,SAASE,EAAOb,EAAeC,EAA0B,CAC9D,OAAOH,EAAgBgB,EAAQd,EAAMC,CAAU,CACjD,CAFgBJ,EAAAgB,EAAA,UAIT,SAASE,EAAMf,EAAeC,EAA0B,CAC7D,OAAOH,EAAgBkB,EAAOhB,EAAMC,CAAU,CAChD,CAFgBJ,EAAAkB,EAAA,SAIT,SAASE,EAAMjB,EAAeC,EAA0B,CAC7D,OAAOH,EAAgBoB,EAAOlB,EAAMC,CAAU,CAChD,CAFgBJ,EAAAoB,EAAA,SAIT,SAASE,EAAQnB,EAAeC,EAA0B,CAC/D,OAAOH,EAAgBsB,EAASpB,EAAMC,CAAU,CAClD,CAFgBJ,EAAAsB,EAAA,WAIT,SAASE,EAAKrB,EAAeC,EAA0B,CAC5D,OAAOH,EAAgBwB,EAAMtB,EAAMC,CAAU,CAC/C,CAFgBJ,EAAAwB,EAAA",
  "names": ["method_exports", "__export", "Delete", "Get", "Head", "Options", "Patch", "Post", "Put", "Trace", "__toCommonJS", "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS", "TRACE", "PATCH", "_MetaStore", "node", "key", "data", "root", "MetaStore", "__name", "__publicField", "metaStore_default", "asyncHandler", "originalHandler", "meta", "request", "response", "args", "context", "__name", "decoratorFabric", "method", "path", "statusCode", "target", "name", "descriptor", "originalDescriptorValue", "metaStore_default", "Get", "GET", "Put", "PUT", "Post", "POST", "Delete", "DELETE", "Patch", "PATCH", "Trace", "TRACE", "Options", "OPTIONS", "Head", "HEAD"]
}
