{
  "version": 3,
  "sources": ["../../packages/utils/helpers.ts"],
  "sourcesContent": ["type PathArgsType = {\n  path: string,\n  prefix?: string,\n  property?: string,\n  query?: string,\n};\n\nexport function normalizePath({ prefix, path, property, query}: PathArgsType): string {\n  const pathname = [\n    addSlash(prefix),\n    addSlash(path),\n  ].join('');\n\n  return pathname;\n}\n\nexport function addSlash(param?: string): string {\n  if (param) {\n    const cleanParam = param.replace('/', '');\n\n    return cleanParam.length ? '/' + cleanParam : '';\n  }\n\n  return '';\n}\n\nexport function isPrimitive(value: any) {\n  return !(value instanceof Object);\n}\n\nexport function isPromise(value: any) {\n  return typeof value === 'object' && typeof value.then === 'function';\n}\n\nexport function normalizeSlash(value: string) {\n  let val = value;\n\n  while (val.startsWith('/')) {\n    val = val.slice(1);\n  }\n\n  while (val.endsWith('/')) {\n    val = val.slice(0, -1);\n  }\n\n  return '/' + val;\n}\n\nexport function getPath(prefix?: string, pathName?: string): {\n  pathName: string,\n  prefix: string,\n  props: string[],\n} {\n  const routePrefix = prefix ?? '';\n  const routePathName = pathName ?? '';\n\n  if (routePrefix.includes(':')) {\n    throw new Error('cant has semicolon');\n  }\n\n  if (routePathName.includes('*')) {\n    throw new Error('cant has semicolon');\n  }\n\n  const props: string[] = [];\n  const normalizedPathName = routePathName.split('/').reduce((acc, character) => {\n    if (character.includes(':')) {\n      const propName = character.slice(1);\n\n      if (isVarName(propName)) {\n        props.push(character.slice(1));\n      } else {\n        throw new Error(`invalid var name: ${propName}`);\n      }\n\n      return acc + '/' + character;\n    }\n\n    return acc + '/' + character;\n  }, '')\n\n  const normalizedPrefix = normalizeSlash(routePrefix);\n\n  return {\n    pathName: normalizeSlash(normalizedPrefix + normalizeSlash(normalizedPathName)),\n    prefix: normalizedPrefix,\n    props,\n  };\n}\n\nexport function isVarName(name: string) {\n  if (name.trim() !== name) {\n    return false;\n  }\n\n  try {\n    new Function(name, 'var ' + name);\n  } catch (_) {\n    return false;\n  }\n\n  return true;\n}\n"],
  "mappings": "4dAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,EAAA,YAAAC,EAAA,gBAAAC,EAAA,cAAAC,EAAA,cAAAC,EAAA,kBAAAC,EAAA,mBAAAC,IAAA,eAAAC,EAAAT,GAOO,SAASU,EAAc,CAAE,OAAAC,EAAQ,KAAAC,EAAM,SAAAC,EAAU,MAAAC,CAAK,EAAyB,CAMpF,MALiB,CACfC,EAASJ,CAAM,EACfI,EAASH,CAAI,CACf,EAAE,KAAK,EAAE,CAGX,CAPgBI,EAAAN,EAAA,iBAST,SAASK,EAASE,EAAwB,CAC/C,GAAIA,EAAO,CACT,IAAMC,EAAaD,EAAM,QAAQ,IAAK,EAAE,EAExC,OAAOC,EAAW,OAAS,IAAMA,EAAa,GAGhD,MAAO,EACT,CARgBF,EAAAD,EAAA,YAUT,SAASI,EAAYC,EAAY,CACtC,MAAO,EAAEA,aAAiB,OAC5B,CAFgBJ,EAAAG,EAAA,eAIT,SAASE,EAAUD,EAAY,CACpC,OAAO,OAAOA,GAAU,UAAY,OAAOA,EAAM,MAAS,UAC5D,CAFgBJ,EAAAK,EAAA,aAIT,SAASC,EAAeF,EAAe,CAC5C,IAAIG,EAAMH,EAEV,KAAOG,EAAI,WAAW,GAAG,GACvBA,EAAMA,EAAI,MAAM,CAAC,EAGnB,KAAOA,EAAI,SAAS,GAAG,GACrBA,EAAMA,EAAI,MAAM,EAAG,EAAE,EAGvB,MAAO,IAAMA,CACf,CAZgBP,EAAAM,EAAA,kBAcT,SAASE,EAAQb,EAAiBc,EAIvC,CACA,IAAMC,EAAcf,GAAU,GACxBgB,EAAgBF,GAAY,GAElC,GAAIC,EAAY,SAAS,GAAG,EAC1B,MAAM,IAAI,MAAM,oBAAoB,EAGtC,GAAIC,EAAc,SAAS,GAAG,EAC5B,MAAM,IAAI,MAAM,oBAAoB,EAGtC,IAAMC,EAAkB,CAAC,EACnBC,EAAqBF,EAAc,MAAM,GAAG,EAAE,OAAO,CAACG,EAAKC,IAAc,CAC7E,GAAIA,EAAU,SAAS,GAAG,EAAG,CAC3B,IAAMC,EAAWD,EAAU,MAAM,CAAC,EAElC,GAAIE,EAAUD,CAAQ,EACpBJ,EAAM,KAAKG,EAAU,MAAM,CAAC,CAAC,MAE7B,OAAM,IAAI,MAAM,qBAAqBC,GAAU,EAGjD,OAAOF,EAAM,IAAMC,EAGrB,OAAOD,EAAM,IAAMC,CACrB,EAAG,EAAE,EAECG,EAAmBZ,EAAeI,CAAW,EAEnD,MAAO,CACL,SAAUJ,EAAeY,EAAmBZ,EAAeO,CAAkB,CAAC,EAC9E,OAAQK,EACR,MAAAN,CACF,CACF,CAxCgBZ,EAAAQ,EAAA,WA0CT,SAASS,EAAUE,EAAc,CACtC,GAAIA,EAAK,KAAK,IAAMA,EAClB,MAAO,GAGT,GAAI,CACF,IAAI,SAASA,EAAM,OAASA,CAAI,CAClC,MAAE,CACA,MAAO,EACT,CAEA,MAAO,EACT,CAZgBnB,EAAAiB,EAAA",
  "names": ["helpers_exports", "__export", "addSlash", "getPath", "isPrimitive", "isPromise", "isVarName", "normalizePath", "normalizeSlash", "__toCommonJS", "normalizePath", "prefix", "path", "property", "query", "addSlash", "__name", "param", "cleanParam", "isPrimitive", "value", "isPromise", "normalizeSlash", "val", "getPath", "pathName", "routePrefix", "routePathName", "props", "normalizedPathName", "acc", "character", "propName", "isVarName", "normalizedPrefix", "name"]
}
